
# sig_mcdm_diagnostic_app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import numpy as np

# --- Disease Profiles ---
diseases = {
    'Sepsis': [39.0, 180, 25.0, 0, 0.3, 0.6, 0.0],
    'Dengue DHF': [38.5, 45, 4.0, 1, 0.6, 0.3, 0.9],
    'Meningitis': [39.2, 150, 12.0, 0, 0.6, 0.9, 0.3],
    'Leukemia': [38.0, 90, 1.2, 1, 0.6, 0.9, 0.6]
}
criteria = ['Fever (¬∞C)', 'Platelet Count', 'WBC Count', 'Bleeding', 'Fatigue', 'Pain', 'Nausea']

# --- App Title ---
st.set_page_config(page_title="SIG-MCDM Diagnostic Support System")
st.title("üß† SIG-MCDM Diagnostic Support System")
st.markdown("An early-stage clinical assistant for analyzing high-risk acute conditions.")

# --- User Input Form ---
with st.form("diagnosis_form"):
    patient_name = st.text_input("Patient Name")
    doctor_name = st.text_input("Doctor Name")
    fever = st.number_input("Fever (¬∞C)", 35.0, 42.0, step=0.1)
    platelet = st.number_input("Platelet Count (√ó10‚Åπ/L)", 10, 500)
    wbc = st.number_input("White Blood Cell Count (√ó10‚Åπ/L)", 0.5, 30.0, step=0.1)
    bleeding = st.selectbox("Bleeding Tendency", ["No", "Yes"])
    fatigue = st.selectbox("Fatigue Level", ["None", "Mild", "Moderate", "Severe"])
    pain = st.selectbox("Pain Level", ["None", "Mild", "Moderate", "Severe", "Extreme"])
    nausea = st.selectbox("Nausea Frequency", ["None", "Slight", "Frequent"])
    submitted = st.form_submit_button("Diagnose")

# --- Fuzzy Linguistic Mapping ---
fuzzy_map = {
    "None": 0.0,
    "Mild": 0.3,
    "Moderate": 0.6,
    "Severe": 0.9,
    "Extreme": 1.0,
    "Slight": 0.6,
    "Frequent": 0.9,
    "Yes": 1,
    "No": 0
}

# --- Diagnostic Evaluation ---
if submitted:
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    patient_vector = [fever, platelet, wbc, fuzzy_map[bleeding], fuzzy_map[fatigue], fuzzy_map[pain], fuzzy_map[nausea]]

    def euclidean_distance(v1, v2):
        return sum((a - b) ** 2 for a, b in zip(v1, v2)) ** 0.5

    distances = {disease: euclidean_distance(patient_vector, profile) for disease, profile in diseases.items()}
    ranking_df = pd.DataFrame(distances.items(), columns=['Disease', 'Distance']).sort_values(by='Distance')
    max_dist = max(ranking_df['Distance'])
    ranking_df['Similarity (%)'] = (1 - ranking_df['Distance'] / max_dist) * 100

    # Clinical explanations per input
    input_notes = {
        'Fever (¬∞C)': "Elevated temperature may indicate active infection or inflammation.",
        'Platelet Count': "Low platelets can be a sign of bleeding risk or bone marrow disorder.",
        'WBC Count': "Abnormal WBC counts reflect immune response or bone marrow issues.",
        'Bleeding': "Presence of bleeding is common in hemorrhagic or hematologic conditions.",
        'Fatigue': "Persistent fatigue often accompanies systemic infections or cancers.",
        'Pain': "Severe pain may suggest inflammation or organ involvement.",
        'Nausea': "Frequent nausea could point to systemic illness or CNS involvement."
    }

    st.subheader("üßæ Patient Input Summary")
    for i, crit in enumerate(criteria):
        col1, col2 = st.columns([1, 4])
        col1.markdown(f"**{crit}:** {patient_vector[i] if i < 3 else list(fuzzy_map.keys())[list(fuzzy_map.values()).index(patient_vector[i])]}")
        col2.markdown(f"*{input_notes[crit]}*")

    # Display ranking chart
    st.subheader("üìä Diagnostic Ranking by Similarity")
    fig, ax = plt.subplots(figsize=(6, 3))
    ax.barh(ranking_df['Disease'], ranking_df['Similarity (%)'], color='green')
    ax.set_xlabel('Similarity Score (%)')
    ax.set_title('Diagnosis Ranking')
    ax.invert_yaxis()
    for i, (disease, score) in enumerate(zip(ranking_df['Disease'], ranking_df['Similarity (%)'])):
        ax.text(score + 1, i, f"{score:.1f}%", va='center', fontsize=9)
    st.pyplot(fig)

    st.subheader("‚úÖ Most Likely Diagnosis")
    top_disease = ranking_df.iloc[0]['Disease']
    st.success(f"Top ranked diagnosis based on profile similarity: **{top_disease}**")

    # Explanation block
    st.markdown("---")
    st.markdown(f"### üîç Why is '{top_disease}' the Top Match?")
    explanation = {
        'Dengue DHF': [
            "Matches classic dengue features: high fever, low platelet, bleeding signs.",
            "Severe pain and nausea match the typical dengue patient profile."
        ],
        'Sepsis': ["High fever with systemic fatigue and abnormal WBC alignment."],
        'Meningitis': ["High fever with nausea and neurological symptom indicators."],
        'Leukemia': ["Critical low WBC and platelet matching hematologic disorder trends."]
    }
    for point in explanation.get(top_disease, ["Explanation not available."]):
        st.markdown(f"- {point}")

    st.markdown("---")
    st.info("This result is generated by SIG-MCDM: a clinical support system for early identification of high-risk acute conditions.")


    # --- Generate PDF Diagnosis Report ---
    from fpdf import FPDF
    import io

    class PDF(FPDF):
        def header(self):
            self.set_font("Arial", 'B', 12)
            self.cell(0, 10, "SIG-MCDM Diagnosis Report", ln=True, align='C')

        def footer(self):
            self.set_y(-12)
            self.set_font("Arial", 'I', 8)
            self.cell(0, 10, "Generated by SIG-MCDM System", align='C')

    pdf = PDF()
    pdf.add_page()
    pdf.set_font("Arial", '', 10)
    pdf.cell(0, 8, f"Patient: {patient_name}", ln=True)
    pdf.cell(0, 8, f"Doctor: {doctor_name}", ln=True)
    pdf.cell(0, 8, f"Date & Time: {now}", ln=True)
    pdf.ln(4)
    pdf.set_font("Arial", 'B', 11)
    pdf.cell(0, 8, "Patient Input Summary", ln=True)
    pdf.set_font("Arial", '', 10)
    for i, crit in enumerate(criteria):
        value_str = f"{patient_vector[i]}" if i < 3 else list(fuzzy_map.keys())[list(fuzzy_map.values()).index(patient_vector[i])]
        pdf.cell(0, 6, f"{crit}: {value_str}", ln=True)

    pdf.ln(3)
    pdf.set_font("Arial", 'B', 11)
    pdf.cell(0, 8, f"Most Likely Diagnosis: {top_disease}", ln=True)
    pdf.set_font("Arial", '', 10)
    pdf.multi_cell(0, 6, "Top-ranked disease based on profile similarity using Euclidean distance.")

    pdf.ln(3)
    pdf.set_font("Arial", 'B', 11)
    pdf.cell(0, 8, "Explanation:", ln=True)
    pdf.set_font("Arial", '', 10)
    for line in explanation.get(top_disease, ["Explanation not available."]):
        pdf.multi_cell(0, 5, f"- {line}")

    # Save to memory and create download button
    buffer = io.BytesIO()
    pdf.output(buffer)
    buffer.seek(0)
    st.download_button(
        label="üì• Download Diagnosis Report (PDF)",
        data=buffer,
        file_name=f"SIG_MCDM_Report_{patient_name.replace(' ', '_')}.pdf",
        mime="application/pdf"
    )


    # --- Generate PDF Diagnosis Report ---
    from fpdf import FPDF

    class PDF(FPDF):
        def header(self):
            self.set_font("Arial", 'B', 12)
            self.cell(0, 10, "SIG-MCDM Diagnosis Report", ln=True, align='C')

        def footer(self):
            self.set_y(-12)
            self.set_font("Arial", 'I', 8)
            self.cell(0, 10, "Generated by SIG-MCDM System", align='C')

    pdf = PDF()
    pdf.add_page()
    pdf.set_font("Arial", '', 10)
    pdf.cell(0, 8, f"Patient: {patient_name}", ln=True)
    pdf.cell(0, 8, f"Doctor: {doctor_name}", ln=True)
    pdf.cell(0, 8, f"Date & Time: {now}", ln=True)
    pdf.ln(4)
    pdf.set_font("Arial", 'B', 11)
    pdf.cell(0, 8, "Patient Input Summary", ln=True)
    pdf.set_font("Arial", '', 10)
    for i, crit in enumerate(criteria):
        value_str = f"{patient_vector[i]}" if i < 3 else list(fuzzy_map.keys())[list(fuzzy_map.values()).index(patient_vector[i])]
        pdf.cell(0, 6, f"{crit}: {value_str}", ln=True)

    pdf.ln(3)
    pdf.set_font("Arial", 'B', 11)
    pdf.cell(0, 8, f"Most Likely Diagnosis: {top_disease}", ln=True)
    pdf.set_font("Arial", '', 10)
    pdf.multi_cell(0, 6, "Top-ranked disease based on profile similarity using Euclidean distance.")

    pdf.ln(3)
    pdf.set_font("Arial", 'B', 11)
    pdf.cell(0, 8, "Explanation:", ln=True)
    pdf.set_font("Arial", '', 10)
    for line in explanation.get(top_disease, ["Explanation not available."]):
        pdf.multi_cell(0, 5, f"- {line}")

    pdf_bytes = pdf.output(dest='S').encode('latin1')
    st.download_button(
        label="üì• Download Diagnosis Report (PDF)",
        data=pdf_bytes,
        file_name=f"SIG_MCDM_Report_{patient_name.replace(' ', '_')}.pdf",
        mime="application/pdf"
    )
